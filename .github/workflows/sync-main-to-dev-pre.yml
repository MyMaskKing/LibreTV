name: 同步main到dev测试分支(Beta版)

on:
  # 只允许手动触发
  workflow_dispatch:

# 添加必要的权限
permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  BACKUP_DIR: '.sync-backups'
  TEMP_DIR: '.sync-temp'
  BACKUP_RETAIN_DAYS: 7
  # 排除文件配置文件路径
  EXCLUDE_FILES_CONFIG: 'sync-exclude.txt'

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "✅ Git配置完成"
      
      - name: 读取排除文件列表并备份
        id: backup
        run: |
          if [ ! -f "$EXCLUDE_FILES_CONFIG" ]; then
            echo "❌ 错误：排除文件配置 $EXCLUDE_FILES_CONFIG 不存在"
            exit 1
          fi
          
          # 创建临时目录
          mkdir -p "$TEMP_DIR"
          
          # 备份配置文件
          cp "$EXCLUDE_FILES_CONFIG" "$TEMP_DIR/exclude_config.bak"
          
          # 读取并处理排除文件列表
          EXCLUDE_PATTERNS=()
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]; then
              continue
            fi
            line=$(echo "$line" | xargs)
            if [[ -n "$line" ]]; then
              EXCLUDE_PATTERNS+=("$line")
              echo "📋 读取到需要保留的文件/目录: $line"
            fi
          done < "$EXCLUDE_FILES_CONFIG"
          
          # 备份需要保留的文件
          for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            if [[ "$pattern" == */ ]]; then
              # 目录模式
              if [ -d "$pattern" ]; then
                mkdir -p "$TEMP_DIR/$pattern"
                cp -r "$pattern"* "$TEMP_DIR/$pattern" 2>/dev/null || true
                echo "📦 备份目录: $pattern"
              fi
            else
              # 文件模式
              if [ -f "$pattern" ]; then
                target_dir="$TEMP_DIR/$(dirname "$pattern")"
                mkdir -p "$target_dir"
                cp -r "$pattern" "$target_dir/" 2>/dev/null || true
                echo "📄 备份文件: $pattern"
              fi
            fi
          done
          
          # 将排除模式列表保存到环境变量
          {
            echo "EXCLUDE_PATTERNS<<EOF"
            printf "%s\n" "${EXCLUDE_PATTERNS[@]}"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: 准备分支
        id: prepare
        run: |
          echo "🔄 获取最新代码..."
          git fetch origin
          git fetch origin main:main
          
          echo "🔍 检查custom-dev分支..."
          if ! git show-ref --verify --quiet refs/remotes/origin/custom-dev; then
            echo "⚠️ custom-dev分支不存在，从main创建..."
            git checkout -b custom-dev origin/main
          else
            echo "✅ 切换到custom-dev分支"
            git checkout custom-dev
            git reset --hard origin/custom-dev
          fi

      - name: 智能合并
        id: merge
        run: |
          echo "🔄 开始智能合并..."
          
          # 1. 先将所有文件重置为main分支版本
          echo "📥 应用main分支的所有更改..."
          git checkout origin/main -- .
          
          # 2. 恢复exclude列表中的文件
          while IFS= read -r pattern; do
            if [ -z "$pattern" ]; then
              continue
            fi
            
            echo "🔄 处理: $pattern"
            
            # 跳过注释行
            if [[ "$pattern" =~ ^[[:space:]]*# ]]; then
              continue
            fi
            
            # 处理目录
            if [[ "$pattern" == */ ]]; then
              if [ -d "$TEMP_DIR/$pattern" ]; then
                echo "  📂 恢复目录: $pattern"
                rm -rf "$pattern"
                cp -r "$TEMP_DIR/$pattern" "$(dirname "$pattern")/"
              fi
              continue
            fi
            
            # 处理单个文件
            if [ -f "$TEMP_DIR/$pattern" ]; then
              echo "  📄 处理文件: $pattern"
              
              # 检查文件在main分支是否有更改
              if git diff --quiet origin/main origin/custom-dev -- "$pattern" 2>/dev/null; then
                echo "    ✓ 文件无差异，使用原文件"
                cp -f "$TEMP_DIR/$pattern" "$pattern"
              else
                echo "    ⚠️ 检测到差异，尝试合并..."
                
                # 创建临时文件用于合并
                TEMP_MERGE_DIR="$TEMP_DIR/merge"
                mkdir -p "$TEMP_MERGE_DIR"
                BASE_FILE="$TEMP_MERGE_DIR/base"
                OURS_FILE="$TEMP_MERGE_DIR/ours"
                THEIRS_FILE="$TEMP_MERGE_DIR/theirs"
                
                # 获取文件的各个版本
                git show "origin/main:$pattern" > "$BASE_FILE" 2>/dev/null || touch "$BASE_FILE"
                cp "$TEMP_DIR/$pattern" "$OURS_FILE"
                git show "origin/main:$pattern" > "$THEIRS_FILE" 2>/dev/null || touch "$THEIRS_FILE"
                
                # 尝试三方合并
                if git merge-file -p "$OURS_FILE" "$BASE_FILE" "$THEIRS_FILE" > "$pattern" 2>/dev/null; then
                  echo "    ✅ 自动合并成功"
                else
                  echo "    ❌ 合并冲突"
                  echo "$pattern" >> "$TEMP_DIR/conflict_files.txt"
                  # 暂时使用main版本
                  git checkout origin/main -- "$pattern"
                fi
                
                # 清理临时合并文件
                rm -rf "$TEMP_MERGE_DIR"
              fi
            fi
          done <<< "$EXCLUDE_PATTERNS"
          
          # 3. 检查是否有冲突文件
          if [ -f "$TEMP_DIR/conflict_files.txt" ]; then
            echo "MERGE_CONFLICT=true" >> $GITHUB_ENV
            echo "CONFLICT_FILES<<EOF" >> $GITHUB_ENV
            cat "$TEMP_DIR/conflict_files.txt" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "MERGE_CONFLICT=false" >> $GITHUB_ENV
          fi
          
          # 4. 提交更改
          git add -A
          if git diff --cached --quiet; then
            echo "✅ 没有需要提交的更改"
          else
            git commit -m "同步main分支代码，保留custom-dev分支的自定义修改"
            git push -f origin custom-dev
          fi

      - name: 创建Issue报告
        if: env.MERGE_CONFLICT == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = `
            # main -> custom-dev 同步冲突报告
            
            在同步过程中发现以下文件存在冲突，已暂时使用main分支的版本。
            这些文件都在 \`sync-exclude.txt\` 中列出，需要保留custom-dev的自定义修改。
            
            ## 冲突文件列表
            \`\`\`
            ${process.env.CONFLICT_FILES}
            \`\`\`
            
            ## 备份位置
            所有文件的custom-dev版本已备份在 \`${process.env.TEMP_DIR}\` 目录下，保持原有目录结构。
            
            ## 处理说明
            1. 目前这些文件使用了main分支的版本
            2. custom-dev分支的原始代码已备份
            3. 请手动合并这些文件的更改
            
            ## 手动处理步骤
            1. 检查备份文件内容
            2. 在custom-dev分支上手动合并更改
            3. 确保合并后的代码与main分支的改动不冲突
            4. 提交并推送更改到custom-dev分支
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 main -> custom-dev 同步冲突报告',
              body: issueBody,
              labels: ['sync-conflict']
            });

      - name: 清理临时文件
        if: always()
        run: |
          rm -rf $TEMP_DIR
          echo "🧹 清理临时文件完成"
      
      - name: 通知结果
        run: |
          if [ "$MERGE_CONFLICT" = "true" ]; then
            echo "⚠️ 同步完成，但有冲突文件需要处理，请查看创建的Issue。"
          else
            echo "✅ 同步完成！main分支代码已同步到custom-dev，并保留了自定义修改。"
          fi
