name: 同步main到dev测试分支(基于exclude配置)

on:
  # 只允许手动触发
  workflow_dispatch:

# 添加必要的权限
permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  BACKUP_DIR: '.sync-backups'
  TEMP_DIR: '.sync-temp'
  EXCLUDE_FILE: 'sync-exclude.txt'
  BACKUP_RETAIN_DAYS: 7

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "✅ Git配置完成"
      
      - name: 同步main分支到custom-dev
        run: |
          echo "🚀 开始同步main分支到custom-dev分支..."
          
          # 检查exclude配置文件是否存在
          if [ ! -f "$EXCLUDE_FILE" ]; then
            echo "❌ 错误：$EXCLUDE_FILE 文件不存在"
            exit 1
          fi
          
          echo "📥 获取最新代码..."
          git fetch origin
          git fetch origin main:main
          
          echo "🔍 检查custom-dev分支状态..."
          if ! git show-ref --verify --quiet refs/remotes/origin/custom-dev; then
            echo "⚠️ custom-dev分支不存在，正在创建..."
            git checkout -b custom-dev
            echo "✅ custom-dev分支创建成功"
          else
            echo "✅ 切换到已存在的custom-dev分支"
            git checkout custom-dev
            echo "🔄 重置分支到最新状态"
            git reset --hard origin/custom-dev
          fi

          echo "🧹 清理可能存在的合并状态..."
          git merge --abort || true

          # 读取需要保留的文件列表（排除注释和空行）
          EXCLUDE_PATTERNS=$(grep -v '^#' "$EXCLUDE_FILE" | grep -v '^$')
          
          # 创建临时目录和备份目录
          TEMP_DIR=".sync-temp"
          BACKUP_ROOT="../backup_files"
          rm -rf "$TEMP_DIR" "$BACKUP_ROOT"
          mkdir -p "$TEMP_DIR" "$BACKUP_ROOT"
          
          # 创建临时文件存储备份文件列表
          BACKUP_FILES_LIST="/tmp/backup_files_list.txt"
          > "$BACKUP_FILES_LIST"  # 清空文件
          
          # 获取共同祖先
          base=$(git merge-base main custom-dev)
          
          # 备份需要保留的文件
          echo "📦 备份需要保留的文件..."
          while IFS= read -r pattern; do
            if [ -z "$pattern" ]; then
              continue
            fi
            
            # 如果是目录模式（以/结尾）
            if [[ "$pattern" == */ ]]; then
              if [ -d "$pattern" ]; then
                # 检查目录是否有修改
                if ! git diff --quiet $base HEAD -- "$pattern"; then
                  dir_name=$(basename "$pattern")
                  backup_dir="$BACKUP_ROOT/$pattern"
                  mkdir -p "$backup_dir"
                  cp -r "$pattern"* "$backup_dir"
                  echo "$pattern" >> "$BACKUP_FILES_LIST"
                  echo "✅ 备份已修改的目录: $pattern"
                fi
              fi
            else
              # 如果是文件
              if [ -f "$pattern" ]; then
                # 检查文件是否有修改
                if ! git diff --quiet $base HEAD -- "$pattern"; then
                  file_dir=$(dirname "$pattern")
                  backup_dir="$BACKUP_ROOT/$file_dir"
                  mkdir -p "$backup_dir"
                  backup_name="$(basename "$pattern").$(date +%Y%m%d_%H%M%S).backup"
                  cp "$pattern" "$backup_dir/$backup_name"
                  echo "$file_dir/$backup_name" >> "$BACKUP_FILES_LIST"
                  echo "✅ 备份已修改的文件: $pattern"
                fi
                # 保存到临时目录用于后续恢复
                target_dir="$TEMP_DIR/$(dirname "$pattern")"
                mkdir -p "$target_dir"
                cp "$pattern" "$TEMP_DIR/$pattern"
              fi
            fi
          done <<< "$EXCLUDE_PATTERNS"
          
          echo "🔄 切换到main分支代码..."
          git checkout main -- .
          
          echo "📥 恢复保留的文件..."
          if [ -d "$TEMP_DIR" ]; then
            cp -r "$TEMP_DIR"/* .
            echo "✅ 恢复完成"
          fi
          
          # 读取备份文件列表
          BACKUP_FILES=""
          if [ -f "$BACKUP_FILES_LIST" ]; then
            BACKUP_FILES=$(cat "$BACKUP_FILES_LIST")
          fi
          
          # 提交更改
          git add -A
          if git diff --cached --quiet; then
            echo "✨ 没有需要提交的更改"
          else
            git commit -m "同步main分支代码并保留自定义修改"
            echo "✅ 更改已提交"
          fi
          
          # 推送更改
          git push --force origin custom-dev
          echo "🚀 更改已推送到custom-dev分支"
          
          # 设置环境变量用于创建Issue
          if [ ! -z "$BACKUP_FILES" ]; then
            echo "BACKUP_FILES<<EOF" >> $GITHUB_ENV
            echo "$BACKUP_FILES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # 设置标志，表示需要创建Issue
            echo "NEED_CREATE_ISSUE=true" >> $GITHUB_ENV
            
            echo "📋 检测到文件修改，将创建Issue报告情况..."
          else
            echo "✅ 没有检测到文件修改"
          fi
          
          # 清理临时文件
          rm -rf "$TEMP_DIR" "$BACKUP_ROOT"
          echo "🧹 清理临时文件完成"

      - name: 创建Issue报告
        if: env.NEED_CREATE_ISSUE == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('📝 正在创建同步报告...');
            
            const issueBody = `
            # main -> custom-dev 同步报告
            
            在同步过程中，以下文件在 custom-dev 分支中有自定义修改，已自动备份：
            
            ## 已备份的文件
            \`\`\`
            ${process.env.BACKUP_FILES}
            \`\`\`
            
            ## 处理说明
            1. 以上文件已在同目录下创建备份
            2. 文件已按照 sync-exclude.txt 的配置进行了保留
            3. 如需进一步调整，请参考备份文件进行手动合并
            
            ## 后续步骤
            1. 检查备份文件的内容
            2. 确认当前文件的内容是否符合预期
            3. 如需调整，请在 custom-dev 分支上进行修改
            4. 完成后可以删除备份文件
            `;
            
            console.log('📤 提交Issue...');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 main -> custom-dev 同步报告',
              body: issueBody,
              labels: ['sync-report']
            });
            console.log('✅ Issue创建成功');
      
      - name: Notify result
        run: |
          echo "✅ 同步流程已完成。如有备份文件，请查看创建的Issue了解详情。"
