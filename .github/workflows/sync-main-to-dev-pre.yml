name: 🔄同步main到dev测试分支(基于exclude配置)

on:
  # 只允许手动触发
  workflow_dispatch:

# 添加必要的权限
permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  BACKUP_DIR: '.sync-backups'
  TEMP_DIR: '.sync-temp'
  BACKUP_RETAIN_DAYS: 7
  EXCLUDE_FILE: 'sync-exclude.txt'

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 配置Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "✅ Git配置完成"
      
      - name: 同步main分支到custom-dev
        run: |
          echo "🚀 开始同步main分支到custom-dev分支..."
          
          # 创建必要的目录
          mkdir -p "$BACKUP_DIR"
          mkdir -p "$TEMP_DIR"
          echo "📁 创建工作目录完成"
          
          # 检查 exclude 文件是否存在
          if [ ! -f "$EXCLUDE_FILE" ]; then
            echo "⚠️ $EXCLUDE_FILE 文件不存在，将使用main分支的所有更改"
            exit 1
          fi
          
          # 预处理 exclude 文件，去除注释和空行
          EXCLUDE_PATTERNS=$(grep -v '^#' "$EXCLUDE_FILE" | grep -v '^[[:space:]]*$')
          if [ -z "$EXCLUDE_PATTERNS" ]; then
            echo "⚠️ $EXCLUDE_FILE 文件为空或只包含注释"
            exit 1
          fi
          
          echo "🔍 使用以下排除规则："
          echo "$EXCLUDE_PATTERNS"
          
          echo "📥 获取最新代码..."
          git fetch origin
          git fetch origin main:main
          
          echo "🔍 检查custom-dev分支状态..."
          if ! git show-ref --verify --quiet refs/remotes/origin/custom-dev; then
            echo "⚠️ custom-dev分支不存在，正在创建..."
            git checkout -b custom-dev
            echo "✅ custom-dev分支创建成功"
          else
            echo "✅ 切换到已存在的custom-dev分支"
            git checkout custom-dev
            echo "🔄 重置分支到最新状态"
            git reset --hard origin/custom-dev
          fi

          # 检查是否有需要同步的更改
          CHANGES=$(git diff --name-only main)
          if [ -z "$CHANGES" ]; then
            echo "✨ 没有检测到需要同步的更改"
            exit 0
          fi

          # 创建临时目录
          TEMP_PATCH_DIR="temp_patches"
          rm -rf "$TEMP_PATCH_DIR"
          mkdir -p "$TEMP_PATCH_DIR"
          
          # 创建冲突文件列表和处理结果
          CONFLICT_FILES=""
          CONFLICT_SUMMARY=""
          
          # 首先，获取所有custom-dev中的修改
          echo "📥 备份custom-dev的修改..."
          while IFS= read -r pattern; do
            if [ -z "$pattern" ]; then
              continue
            fi
            
            if [[ "$pattern" =~ /$ ]] || [ -d "$pattern" ]; then
              # 是目录
              if [ -d "$pattern" ]; then
                echo "💾 备份目录: $pattern"
                cp -r "$pattern" "$TEMP_PATCH_DIR/"
              fi
            else
              # 是文件
              if [ -f "$pattern" ]; then
                echo "📝 创建补丁: $pattern"
                git diff main...custom-dev -- "$pattern" > "$TEMP_PATCH_DIR/$(basename "$pattern").patch"
              fi
            fi
          done < <(echo "$EXCLUDE_PATTERNS")
          
          # 切换到main分支的内容
          echo "🔄 更新所有文件到main分支版本..."
          git checkout main -- .
          
          # 然后处理 exclude 文件中的内容
          echo "$EXCLUDE_PATTERNS" | while IFS= read -r pattern; do
            if [ -z "$pattern" ]; then
              continue
            fi
            
            echo "🔄 处理: $pattern"
            
            if [[ "$pattern" =~ /$ ]] || [ -d "$pattern" ]; then
              # 是目录
              if [ -d "$TEMP_PATCH_DIR/$(basename "$pattern")" ]; then
                echo "📁 还原目录: $pattern"
                rm -rf "$pattern"
                cp -r "$TEMP_PATCH_DIR/$(basename "$pattern")" "$(dirname "$pattern")/"
                
                # 记录冲突信息
                if ! git diff --quiet HEAD -- "$pattern"; then
                  CONFLICT_FILES="${CONFLICT_FILES}${pattern}\n"
                  CONFLICT_SUMMARY="${CONFLICT_SUMMARY}目录 ${pattern} 有修改，使用custom-dev版本\n"
                fi
              fi
            else
              # 是文件
              if [ -f "$TEMP_PATCH_DIR/$(basename "$pattern").patch" ]; then
                echo "📄 处理文件: $pattern"
                
                # 尝试应用补丁
                if git apply --check "$TEMP_PATCH_DIR/$(basename "$pattern").patch" 2>/dev/null; then
                  echo "✅ 应用补丁到: $pattern"
                  git apply --whitespace=fix "$TEMP_PATCH_DIR/$(basename "$pattern").patch"
                  CONFLICT_FILES="${CONFLICT_FILES}${pattern}\n"
                  CONFLICT_SUMMARY="${CONFLICT_SUMMARY}文件 ${pattern} 补丁应用成功\n"
                else
                  echo "⚠️ 补丁应用失败: $pattern"
                  # 检查文件在main分支是否存在
                  if git cat-file -e main:"$pattern" 2>/dev/null; then
                    echo "📄 文件在main分支存在，使用mian版本，准备备份custom-dev版本"
                    # 确保目录存在
                    mkdir -p "$(dirname "$pattern")"
                    
                    # 创建临时文件存储不同版本的内容
                    temp_base="${TEMP_DIR}/$(basename "$pattern").base"
                    temp_main="${TEMP_DIR}/$(basename "$pattern").main"
                    temp_dev="${TEMP_DIR}/$(basename "$pattern").dev"
                    
                    # 获取merge-base的版本
                    merge_base=$(git merge-base main custom-dev)
                    git show "$merge_base":"$pattern" > "$temp_base" 2>/dev/null || touch "$temp_base"
                    
                    # 获取main和custom-dev的版本
                    git show main:"$pattern" > "$temp_main" 2>/dev/null || touch "$temp_main"
                    git show custom-dev:"$pattern" > "$temp_dev" 2>/dev/null || touch "$temp_dev"
                    
                    # 使用merge-file进行三方合并
                    backup_name="${pattern}.$(date +%Y%m%d_%H%M%S).merge.bak"
                    # 复制custom-dev的内容作为当前文件
                    cp "$temp_dev" "$backup_name"
                    git merge-file -p -L "custom-dev" -L "base" -L "main" "$temp_dev" "$temp_base" "$temp_main" > "$backup_name" || true
                    
                    echo "✅ 已备份文件到: $backup_name"
                    
                    # 使用main版本
                    git checkout main -- "$pattern"
                    
                    CONFLICT_FILES="${CONFLICT_FILES}${pattern}\n"
                    CONFLICT_SUMMARY="${CONFLICT_SUMMARY}文件 ${pattern} 存在差异，已生成对比文件 ${backup_name}\n"
                  else
                    echo "📄 文件在main分支不存在，保留custom-dev版本"
                    git checkout custom-dev -- "$pattern"
                    
                    CONFLICT_FILES="${CONFLICT_FILES}${pattern}\n"
                    CONFLICT_SUMMARY="${CONFLICT_SUMMARY}文件 ${pattern} 在main分支不存在，保留custom-dev版本\n"
                  fi
                fi
              fi
            fi
          done
          
          # 清理临时文件
          rm -rf "$TEMP_PATCH_DIR"
          rm -rf "$TEMP_DIR"
          echo "🧹 清理临时文件完成"
          
          # 提交更改
          git add -A
          git reset HEAD "$TEMP_DIR" "$BACKUP_DIR"
          git clean -fd "$TEMP_DIR"
          git commit -m "同步main分支代码，保留指定文件的custom-dev版本" || echo "没有需要提交的更改"
          git push --force origin custom-dev
          
          # 如果有冲突文件，设置环境变量用于创建Issue
          if [ ! -z "$CONFLICT_FILES" ]; then
            {
              echo "HAS_CONFLICTS=true"
              echo "CONFLICT_FILES<<EOFCF"
              echo -e "$CONFLICT_FILES"
              echo "EOFCF"
              echo "CONFLICT_SUMMARY<<EOFCS"
              echo -e "$CONFLICT_SUMMARY"
              echo "EOFCS"
            } >> "$GITHUB_ENV"
            
            # 输出调试信息
            echo "DEBUG: 设置的环境变量内容："
            echo "HAS_CONFLICTS=true"
            echo "CONFLICT_FILES:"
            echo -e "$CONFLICT_FILES"
            echo "CONFLICT_SUMMARY:"
            echo -e "$CONFLICT_SUMMARY"
            
            echo "📋 检测到修改的文件，将创建Issue报告..."
          fi
          
          echo "✅ 同步完成"

      - name: 创建Issue报告
        if: env.HAS_CONFLICTS == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('📝 正在创建同步报告...');
            console.log('环境变量状态：', {
              hasConflicts: process.env.HAS_CONFLICTS,
              conflictFiles: process.env.CONFLICT_FILES,
              conflictSummary: process.env.CONFLICT_SUMMARY
            });
            
            const issueBody = `
            # main -> custom-dev 同步报告
            
            在同步过程中，以下文件根据 sync-exclude.txt 进行了特殊处理：
            
            ## 处理的文件列表
            \`\`\`
            ${process.env.CONFLICT_FILES || '没有检测到冲突文件'}
            \`\`\`
            
            ## 处理结果
            \`\`\`
            ${process.env.CONFLICT_SUMMARY || '没有处理结果记录'}
            \`\`\`
            
            ## 处理说明
            1. 所有文件已更新到main分支版本
            2. 对于 sync-exclude.txt 中的目录：
               - 使用custom-dev分支的完整内容
            3. 对于 sync-exclude.txt 中的文件：
               - 如果文件在main分支不存在：保留custom-dev版本
               - 如果文件在main分支存在：
                 - 使用main分支版本
                 - 已备份custom-dev版本（.merge.bak文件）
                 - 备份文件包含两个分支的差异对比
            
            ## 后续步骤
            1. 检查处理结果是否符合预期
            2. 查看备份文件（.merge.bak）了解文件变更
            3. 如需调整，请在custom-dev分支上进行修改
            `;
            
            console.log('📤 提交Issue...');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 main -> custom-dev 同步报告',
              body: issueBody,
              labels: ['sync-conflict']
            });
            console.log('✅ Issue创建成功');

      - name: Cleanup temp files
        if: always()
        run: |
          rm -rf $TEMP_DIR
          echo "🧹 清理临时文件完成"

      - name: Notify result
        run: |
          echo "✅ 同步流程已完成。请检查 custom-dev 分支，如有 .backup 文件请手动 diff 并处理。" 
